def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first.

    Your search algorithm needs to return a list of actions that reaches the
    goal. Make sure to implement a graph search algorithm.

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    "*** YOUR CODE HERE ***"
    print problem.isGoalState((1,1))
    print "problem : ", problem
    closed_set=[]
    actions=[]
    start=problem.getStartState()
    closed_set.append(start)
    node=start
    init_fringe=problem.getSuccessors(node) 
    temp=init_fringe
    fringe=util.Stack()
    flag=1
    
    while problem.isGoalState(node)==False :
        for i in temp :
            if flag ==1:
                fringe.push(i)
  
        state=fringe.pop()
        node=state[0]
        action=state[1]
        
        if problem.isGoalState(node) :
            actions.append(action) 
            print "Goal state reached",action,node
            break
     
        if node not in closed_set :
            actions.append(action)
            closed_set.append(node)
            temp=problem.getSuccessors(node)
            if len(temp)==0:
                actions=[]
            flag=1
        else:
            flag=0

    return actions
